import org.gradle.util.GradleVersion

// Don't run against the included builds (if the main build has any).
def isTopLevelBuild = gradle.getParent() == null
if (isTopLevelBuild) {
    def version = GradleVersion.current().baseVersion
    def atLeastGradle5 = version >= GradleVersion.version("5.0")
    def atLeastGradle6 = version >= GradleVersion.version("6.0")

    if (atLeastGradle6) {
        settingsEvaluated { settings ->
            if (!settings.pluginManager.hasPlugin("com.gradle.enterprise")) {
                throw new IllegalStateException("The com.gradle.enterprise plugin is missing from the project (see https://docs.gradle.com/enterprise/gradle-plugin/#gradle_6_x_and_later).")
            }
            registerCallbacks(settings.extensions["gradleEnterprise"], settings.rootProject.name)
        }
    } else if (atLeastGradle5) {
        projectsEvaluated { gradle ->
            if (!gradle.rootProject.pluginManager.hasPlugin("com.gradle.build-scan")) {
                throw new IllegalStateException("The com.gradle.build-scan plugin is missing from the project (see https://docs.gradle.com/enterprise/gradle-plugin/#gradle_5_x).")
            }
            registerCallbacks(gradle.rootProject.extensions["gradleEnterprise"], gradle.rootProject.name)
        }
    } else {
        throw new IllegalStateException("Build validation not supported for Gradle ${GradleVersion.current()}. Upgrade your project's build to Gradle 5 or newer.")
    }
}

def registerCallbacks(gradleEnterprise, rootProjectName) {
    gradleEnterprise.with {
        buildScan {
            def scanFile = new File(experimentDir, "build-scans.csv")
            buildScanPublished { buildScan ->
                def buildScanUri = buildScan.buildScanUri
                def buildScanId = buildScan.buildScanId
                def port = (buildScanUri.port != -1) ? ":" + buildScanUri.port : ""
                def baseUrl = "${buildScanUri.scheme}://${buildScanUri.host}${port}"
                scanFile.append("${rootProjectName},${baseUrl},${buildScanUri},${buildScanId}\n")
            }
            def errorFile = new File(experimentDir, "build-scan-publish-error.txt")
            onError { error ->
                errorFile.text = error
            }
        }
    }
}

File getExperimentDir() {
    def projectProperties = gradle.startParameter.projectProperties
    new File(projectProperties.get("com.gradle.enterprise.build_validation.experimentDir"))
}
