plugins {
    id 'java-gradle-plugin'
    id 'maven-publish'
    id 'signing'
    id 'com.gradle.plugin-publish' version '0.17.0'
    id "org.ajoberstar.grgit" version "4.1.0"
}

group = 'com.gradle'
version = '1.4.3-SNAPSHOT'

repositories {
    gradlePluginPortal()
}

dependencies {
    compileOnly 'com.gradle:gradle-enterprise-gradle-plugin:3.7.1'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

gradlePlugin {
    plugins {
        commonCustomUserData {
            id = 'com.gradle.common-custom-user-data-gradle-plugin'
            displayName = 'Gradle Enterprise Common Custom User Data Gradle Plugin'
            description = 'A Gradle plugin to capture common custom user data used for Gradle Build Scans in Gradle Enterprise'
            implementationClass = 'com.gradle.CommonCustomUserDataGradlePlugin'
        }
    }
}

tasks.withType(ValidatePlugins).configureEach {
    failOnWarning = true
    enableStricterValidation = true
}

/*
The rest of the build logic in this file is only required for publishing to the Gradle Plugin Portal.
When using this project as a template for your own plugin to publish internally, you should delete all code following this comment.
You may also remove `plugin-publish`, `signing` and `grgit` from the `plugins {}` block above.
 */

version = providers.environmentVariable("RELEASE_OVERRIDE_VERSION").forUseAtConfigurationTime().getOrNull() ?: version

pluginBundle {
    website = "https://github.com/gradle/gradle-enterprise-build-config-samples/tree/master/common-custom-user-data-gradle-plugin"
    vcsUrl = "https://github.com/gradle/gradle-enterprise-build-config-samples.git"
    tags = ["gradle", "gradle enterprise"]
}

signing {
    // Require publications to be signed on CI. Otherwise, publication will be signed only if keys are provided.
    required providers.environmentVariable("CI").forUseAtConfigurationTime().isPresent()

    useInMemoryPgpKeys(
        providers.environmentVariable("PGP_SIGNING_KEY").forUseAtConfigurationTime().orNull,
        providers.environmentVariable("PGP_SIGNING_KEY_PASSPHRASE").forUseAtConfigurationTime().orNull)

    sign(configurations.archives)
}

task tagRelease {
    doFirst {
        grgit.tag.add(name: "common-custom-user-data-gradle-plugin-${version}")
        grgit.push(tags: true)
    }
}
