/**
 * This Gradle script captures issues found by reporting tasks,
 * and adds these as custom values.
 * This should be applied to the root project:
 * <code> apply from: file('gradle-quality-check-issues.gradle') </code>
 */

def buildScanApi = project.extensions.findByName('buildScan')
if (!buildScanApi) {
    return
}

gradle.taskGraph.beforeTask { task ->
    if (!ReportingTask.isSupported(task)) {
        return
    }

    task.configure { t -> t.reports.xml.enabled = true }
}

gradle.taskGraph.afterTask { task, TaskState state ->
    if (!ReportingTask.isSupported(task)) {
        return
    }

    def reportFile = task.reports.xml.destination as File
    if (!reportFile.exists()) {
        return
    }

    def report = new XmlSlurper().parse(reportFile)
    def valueName = '' as String
    def errors = [] as List<String>

    if (ReportingTask.CHECKSTYLE.isTask(task)) {
        valueName = 'Verification Checkstyle'
        errors = report.file.collect {
            String filePath = task.project.rootProject.relativePath(it.@name.text())
            it.error.collect { "${filePath}:${it.@line}:${it.@column} \u2192 ${it.@message}" }
        }.flatten() as List<String>
    } else if (ReportingTask.CODENARC.isTask(task)) {
        valueName = 'Verification CodeNarc'
        errors = report.Package.collect {
            def sourceDirectory = appendIfMissing(it.parent().Project.SourceDirectory.text() as String, '/')
            it.File.collect {
                String filePath = task.project.rootProject.relativePath(sourceDirectory + (it.@name.text() as String))
                it.Violation.collect { "${filePath}:${it.@lineNumber} \u2192 ${it.Message.text()}" }
            }.flatten()
        }.flatten() as List<String>
    } else if (ReportingTask.FINDBUGS.isTask(task)) {
        valueName = 'Verification FindBugs'
        errors = report.BugInstance.collect { bugInstance ->
            String type = bugInstance.@type.text()
            def error = bugInstance.breadthFirst().findAll { it.name() == 'SourceLine' }.sort(false) { it.parent().name() as SpotBugsParent }.first()
            String startLine = error.@start.text()
            String endLine = error.@end.text()
            String lineNumber = endLine == startLine ? startLine : "$startLine-$endLine"
            def absoluteFilePath = bugInstance.parent().Project.SrcDir.collect { it.text() }.find { it.endsWith(error.@sourcepath.text()) }
            String relativePath = task.project.rootProject.relativePath(absoluteFilePath)
            "${relativePath}:${lineNumber} \u2192 ${type}"
        }.flatten() as List<String>
    } else if (ReportingTask.SPOTBUGS.isTask(task)) {
        valueName = 'Verification SpotBugs'
        errors = report.BugInstance.collect { bugInstance ->
            String type = bugInstance.@type.text()
            def error = bugInstance.breadthFirst().findAll { it.name() == 'SourceLine' }.sort(false) { it.parent().name() as SpotBugsParent }.first()
            String startLine = error.@start.text()
            String endLine = error.@end.text()
            String lineNumber = endLine == startLine ? startLine : "$startLine-$endLine"
            def absoluteFilePath = bugInstance.parent().Project.SrcDir.collect { it.text() }.find { it.endsWith(error.@sourcepath.text()) }
            String relativePath = task.project.rootProject.relativePath(absoluteFilePath)
            "${relativePath}:${lineNumber} \u2192 ${type}"
        }.flatten() as List<String>
    }

    errors.each { buildScan.value valueName, it }
}

static String appendIfMissing(String str, String suffix) {
    str.endsWith(suffix) ? str : str + suffix
}

enum SpotBugsParent {

    BugInstance, Method, Class
}

enum ReportingTask {

    CHECKSTYLE('org.gradle.api.plugins.quality.Checkstyle'),
    CODENARC('org.gradle.api.plugins.quality.CodeNarc'),
    FINDBUGS('org.gradle.api.plugins.quality.FindBugs'),
    SPOTBUGS('com.github.spotbugs.SpotBugsTask')

    String className

    private ReportingTask(String className) {
        this.className = className
    }

    boolean isTask(task) {
        task.class.name.contains(className)
    }

    static boolean isSupported(task) {
        values().any { it.isTask(task) }
    }

}
